<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>循环不计次</title>
  
  <subtitle>热爱C++与易语言的程序员  QQ:3476146 Mail:admin@studentcms.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.loop.wiki/"/>
  <updated>2019-06-09T08:55:20.931Z</updated>
  <id>http://www.loop.wiki/</id>
  
  <author>
    <name>循环不计次</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[FFMpeg]四、ffmpeg关于timebase的理解</title>
    <link href="http://www.loop.wiki/2019/06/09/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E5%9B%9B%E3%80%81ffmpeg%E5%85%B3%E4%BA%8Etimebase%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.loop.wiki/2019/06/09/FFMpeg编程系列-四、ffmpeg关于timebase的理解/</id>
    <published>2019-06-09T08:16:12.000Z</published>
    <updated>2019-06-09T08:55:20.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-ffmpeg的分层结构"><a href="#一-ffmpeg的分层结构" class="headerlink" title="一.ffmpeg的分层结构"></a>一.ffmpeg的分层结构</h2><p>写这篇文章的时候先把ffmpeg分层问题大致说明一下，我们按照最常见的  ‘转码程序’ 和 ‘摄像头采集’ 以及 ‘播放器’ 三个模型总结。</p><h3 id="1：转码"><a href="#1：转码" class="headerlink" title="1：转码"></a>1：转码</h3><p>转码基本流程：flv格式数据–&gt;h264/aac数据–&gt;yuv/pcm数据–&gt;h264/aac数据–&gt;mp4格式数据。<br>a：我们把flv格式数据或者mp4格式数据这一层叫做mux/demux层或者复用层有些人习惯于叫做封装层，这里叫做mux/demux层下面同理。<br>b：我们把h264/aac数据这一层叫做编解码层或者codec/decode，这里叫做codec/decode层下面同理。<br>c：我们把yuv/pcm数据这一层叫做原始数据层或者Raw data 层，这里叫做Raw data层下面同理。</p><h3 id="2：摄像头采集"><a href="#2：摄像头采集" class="headerlink" title="2：摄像头采集"></a>2：摄像头采集</h3><p>摄像头采集基本流程：yuv/pcm数据–&gt;h264/aac数据–&gt;flv格式数据。<br>a：我们把yuv/pcm数据这一层叫做原始数据层或者Raw data 层，这里叫做Raw data层下面同理。<br>b：我们把h264/aac数据这一层叫做编解码层或者codec，这里叫做codec层下面同理。<br>c：我们把flv格式数据这一层叫做mux层或者复用层有些人习惯于叫做封装层，这里叫做mux层下面同理。</p><h3 id="3：播放器"><a href="#3：播放器" class="headerlink" title="3：播放器"></a>3：播放器</h3><p>播放器基本流程：flv格式数据–&gt;h264/aac数据–&gt;yuv/pcm数据。<br>a：我们把flv格式数据这一层叫做demux层或者复用层有些人习惯于叫做封装层，这里叫做demux层下面同理。<br>b：我们把h264/aac数据这一层叫做编解码层或者decode，这里叫做decode层下面同理。<br>c：我们把yuv/pcm数据这一层叫做原始数据层或者Raw data 层，这里叫做Raw data层下面同理。</p><hr><p>从上面的三个最常用模型不难看出也可以说总结出ffmpeg基本把数据或者说结构分为了 “mux/demux层”也就是ffmpeg中的AVStream<br>“codec/decode层” 也就是ffmpeg中的AVCodec “Raw data 层”这个也在AVStream?中存放着（如果是自己填写的例如ios或者android获取当前毫秒时间的可以单独放置到一个timebse的结构体中），这个。各位看官对这个分层有了大致的了解之后我们再说分层对timebase的影响。</p><h2 id="二-ffmpeg中的timebase是什么"><a href="#二-ffmpeg中的timebase是什么" class="headerlink" title="二.ffmpeg中的timebase是什么"></a>二.ffmpeg中的timebase是什么</h2><p>1：简单来讲ffmpeg的timebase是为了解决当时间戳是小数的时候转化为整数和为了更好的做分层结构而设置的一种机制。</p><p>2：ffmpeg的timebse我们可以理解为单位，比如米，毫秒，秒，千克这些都是单位，但这个timebse有时候不是我们日常中能见到的单位，举个例子ffmpeg本身是以秒为基准的，1秒= 1000毫秒，那如果timebse是1:1很好理解是秒的单位，如果timebase是1:1000也很好理解是毫秒单位，但如果timebase是1:25呢，我们的常用单位就解释不了了，这要是很多人的误区。</p><h2 id="三-ffmpeg中分层结构和timebase的关系"><a href="#三-ffmpeg中分层结构和timebase的关系" class="headerlink" title="三.ffmpeg中分层结构和timebase的关系"></a>三.ffmpeg中分层结构和timebase的关系</h2><h3 id="1：举几个常用的ffmpeg的timebase例子"><a href="#1：举几个常用的ffmpeg的timebase例子" class="headerlink" title="1：举几个常用的ffmpeg的timebase例子"></a>1：举几个常用的ffmpeg的timebase例子</h3><p>a：mux/demux层的timebase，flv，MP4等一般是1:1000，ts一般是1:90x1000<br>b：codec/decode层timebase，h264随着帧率变化例如1:25 aac根据采样率变化例如1:44100。<br>c：Raw data 层的timebase有很多变化比如1:1000x1000或1:1000等等</p><h3 id="2：ffmpeg关于分层结构timebase的转换过程"><a href="#2：ffmpeg关于分层结构timebase的转换过程" class="headerlink" title="2：ffmpeg关于分层结构timebase的转换过程"></a>2：ffmpeg关于分层结构timebase的转换过程</h3><p>a：转码模型<br>首先按照分层结构获取到demux层的timebase将flv数据也就是demux层的timebase转换为codec层的timebase。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;time_base,streams-&gt;decodectext-&gt;time_base,AV_ROUND_NEAR_INF);</code><br>然后将decode层的timebase转换成codec层（这两个同层但也需要转换）的timebase，这里有个问题Raw data 层的timebase可以略过，可以直接从decode转换为coedec，Raw data 层的timebse在摄像头采集和播放器的时候会用到。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;decodectext-&gt;time_base,streams-&gt;codectext-&gt;time_base, AV_ROUND_NEAR_INF);</code><br>最后将codec层的timebase转换为mux层的timebase。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;codectext-&gt;time_base,streams-&gt;time_base,AV_ROUND_NEAR_INF);</code></p><p>b：采集模型<br>首先获取到Raw data 层的timebase如果是windows的可以从streams的timebase中读取，ios和android可以自己单独写个timebase结构体用于转换，将获取到的timebase转换为codec层的timebase。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,timebase_in,streams-&gt;codectext-&gt;time_base, AV_ROUND_NEAR_INF);</code><br>然后将codec层的timebase转换为mux层的timebase<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;codectext-&gt;time_base, streams-&gt;timebase,AV_ROUND_NEAR_INF);</code></p><p>c：播放器模型<br>首先将demux层的timebase转换为decode层的timebase。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;time_base,streams-&gt;decodectext-&gt;time_base, AV_ROUND_NEAR_INF);</code><br>然后将decode层的timebase转换为播放器用的Raw data 层的timebase一般设为1:1000为了将时间戳转化为毫秒。<br><code>picture-&gt;pts = av_rescale_q_rnd(picture-&gt;pts,streams-&gt;decodectext-&gt;time_base,1:1000, AV_ROUND_NEAR_INF);</code></p><h3 id="四、ffmpeg数据结构和timebase的关系"><a href="#四、ffmpeg数据结构和timebase的关系" class="headerlink" title="四、ffmpeg数据结构和timebase的关系"></a>四、ffmpeg数据结构和timebase的关系</h3><ul><li>AVStream的time_base的单位是秒。每种格式的time_base的值不一样，根据采样来计算，比如mpeg的pts、dts都是以90kHz来采样的，所以采样间隔就是1/900000秒。</li><li>AVCodecContext的time_base单位同样为秒，不过精度没有AVStream-&gt;time_base高，大小为1/framerate。</li><li>AVPacket下的pts和dts以AVStream-&gt;time_base为单位(数值比较大)，时间间隔就是AVStream-&gt;time_base。</li><li>AVFrame里面的pkt_pts和pkt_dts是拷贝自AVPacket，同样以AVStream-&gt;time_base为单位；而pts是为输出(显示)准备的，以AVCodecContex-&gt;time_base为单位。</li><li>输入流InputStream下的pts和dts以AV_TIME_BASE为单位(微秒)，至于为什么要转化为微秒，可能是为了避免使用浮点数。</li></ul><h3 id="五、涉及timebase转换的场景"><a href="#五、涉及timebase转换的场景" class="headerlink" title="五、涉及timebase转换的场景"></a>五、涉及timebase转换的场景</h3><p>在某些场景下涉及到PTS的计算时，就涉及到两个Time的转换，以及到底取哪里的time_base进行转换：</p><h5 id="场景1：编码器产生的帧，直接存入某个容器的AVStream中，那么此时packet的time要从AVCodecContext的time转换成目标AVStream的time"><a href="#场景1：编码器产生的帧，直接存入某个容器的AVStream中，那么此时packet的time要从AVCodecContext的time转换成目标AVStream的time" class="headerlink" title="场景1：编码器产生的帧，直接存入某个容器的AVStream中，那么此时packet的time要从AVCodecContext的time转换成目标AVStream的time"></a>场景1：编码器产生的帧，直接存入某个容器的AVStream中，那么此时packet的time要从AVCodecContext的time转换成目标AVStream的time</h5><h5 id="场景2：从一种容器中demux出来的源AVStream的frame，存入另一个容器中某个目的AVStream。此时的时间刻度应该从源AVStream的time，转换成目的AVStream-timebase下的时间。"><a href="#场景2：从一种容器中demux出来的源AVStream的frame，存入另一个容器中某个目的AVStream。此时的时间刻度应该从源AVStream的time，转换成目的AVStream-timebase下的时间。" class="headerlink" title="场景2：从一种容器中demux出来的源AVStream的frame，存入另一个容器中某个目的AVStream。此时的时间刻度应该从源AVStream的time，转换成目的AVStream timebase下的时间。"></a>场景2：从一种容器中demux出来的源AVStream的frame，存入另一个容器中某个目的AVStream。此时的时间刻度应该从源AVStream的time，转换成目的AVStream timebase下的时间。</h5><p>其实，问题的关键还是要理解，不同的场景下取到的数据帧的time是相对哪个时间体系的。<br>demuxmux出来的帧的time：是相对于源AVStream的timebase<br>codecdecode出来的帧的time：是相对于源AVCodecContext的timebase</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h2><p><a href="https://blog.csdn.net/zhuweigangzwg/article/details/64919706" target="_blank" rel="noopener">https://blog.csdn.net/zhuweigangzwg/article/details/64919706</a><br><a href="https://www.jianshu.com/p/bf323cee3b8e" target="_blank" rel="noopener">https://www.jianshu.com/p/bf323cee3b8e</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-ffmpeg的分层结构&quot;&gt;&lt;a href=&quot;#一-ffmpeg的分层结构&quot; class=&quot;headerlink&quot; title=&quot;一.ffmpeg的分层结构&quot;&gt;&lt;/a&gt;一.ffmpeg的分层结构&lt;/h2&gt;&lt;p&gt;写这篇文章的时候先把ffmpeg分层问题大致说明一下
      
    
    </summary>
    
      <category term="-C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>[FFMpeg编程系列]三、数据结构简介</title>
    <link href="http://www.loop.wiki/2019/06/09/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.loop.wiki/2019/06/09/FFMpeg编程系列-三、数据结构简介/</id>
    <published>2019-06-09T07:05:20.000Z</published>
    <updated>2019-06-09T07:57:56.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AVFormatContext"><a href="#1-AVFormatContext" class="headerlink" title="1.AVFormatContext"></a>1.AVFormatContext</h2><p>封装格式上下文结构体，也是统领全局的结构体，保存了视频文件封装 格式相关信息</p><ul><li>iformat：输入视频的AVInputFormat</li><li>nb_streams ：输入视频的AVStream 个数</li><li>streams ：输入视频的AVStream []数组</li><li>duration ：输入视频的时长（以微秒为单位）</li><li>bit_rate ：输入视频的码率</li></ul><h2 id="2-AVInputFormat"><a href="#2-AVInputFormat" class="headerlink" title="2.AVInputFormat"></a>2.AVInputFormat</h2><p>每种封装格式（例如FLV, MKV, MP4, AVI）对应一个该结构体</p><ul><li>name：封装格式名称</li><li>long_name：封装格式的长名称</li><li>extensions：封装格式的扩展名</li><li>id：封装格式ID(AV_CODEC_ID_XXXX)</li><li>一些封装格式处理的接口函数</li></ul><h2 id="3-AVStream"><a href="#3-AVStream" class="headerlink" title="3.AVStream"></a>3.AVStream</h2><p>视频文件中每个视频（音频）流对应一个该结构体</p><ul><li>id：序号</li><li>codec：该流对应的AVCodecContext</li><li>time_base：该流的时基</li><li>r_frame_rate：该流的帧率<h3 id="time-base的介绍"><a href="#time-base的介绍" class="headerlink" title="time_base的介绍"></a>time_base的介绍</h3></li></ul><h2 id="4-AVCodecContext"><a href="#4-AVCodecContext" class="headerlink" title="4.AVCodecContext"></a>4.AVCodecContext</h2><p>编码器上下文结构体，保存了视频（音频）编解码相关信息。</p><ul><li>codec：编解码器的AVCodec</li><li>width, height：图像的宽高（只针对视频）</li><li>pix_fmt：像素格式（只针对视频）</li><li>sample_rate：采样率（只针对音频）</li><li>channels：声道数（只针对音频）</li><li>sample_fmt：采样格式（只针对音频）</li></ul><h2 id="5-AVCodec"><a href="#5-AVCodec" class="headerlink" title="5.AVCodec"></a>5.AVCodec</h2><p>每种视频（音频）编解码器(例如H.264解码器)对应一个该结构体</p><ul><li>name：编解码器名称</li><li>long_name：编解码器长名称</li><li>type：编解码器类型</li><li>id：编解码器ID</li><li>一些编解码的接口函</li></ul><h2 id="6-AVPacket"><a href="#6-AVPacket" class="headerlink" title="6.AVPacket"></a>6.AVPacket</h2><p>存储一帧压缩编码数据</p><ul><li>pts：显示时间戳</li><li>dts ：解码时间戳</li><li>data ：压缩编码数据</li><li>size ：压缩编码数据大小</li><li>stream_index ：所属的AVStream</li></ul><h2 id="7-AVFrame"><a href="#7-AVFrame" class="headerlink" title="7.AVFrame"></a>7.AVFrame</h2><p>存储一帧解码后像素（采样）数据</p><ul><li>data：解码后的图像像素数据（音频采样数据）</li><li>linesize：对视频来说是图像中一行像素的大小；对音频来说是整个音 频帧的大小</li><li>width, height：图像的宽高（只针对视频）</li><li>key_frame：是否为关键帧（只针对视频）</li><li>pict_type：帧类型（只针对视频） 。例如I，P，B</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-AVFormatContext&quot;&gt;&lt;a href=&quot;#1-AVFormatContext&quot; class=&quot;headerlink&quot; title=&quot;1.AVFormatContext&quot;&gt;&lt;/a&gt;1.AVFormatContext&lt;/h2&gt;&lt;p&gt;封装格式上下文结构体
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>[APP逆向]一、某捕鱼游戏APP分析TCP登录</title>
    <link href="http://www.loop.wiki/2019/05/26/APP%E9%80%86%E5%90%91-%E4%B8%80%E3%80%81%E6%9F%90%E6%8D%95%E9%B1%BC%E6%B8%B8%E6%88%8FAPP%E5%88%86%E6%9E%90TCP%E7%99%BB%E5%BD%95/"/>
    <id>http://www.loop.wiki/2019/05/26/APP逆向-一、某捕鱼游戏APP分析TCP登录/</id>
    <published>2019-05-25T16:32:31.000Z</published>
    <updated>2019-05-26T04:04:43.020Z</updated>
    
    <content type="html"><![CDATA[<p>别着急,我还没来得及写<br>着急的话就去这里看吧,之前发在论坛里了:<a href="https://bbs.125.la/forum.php?mod=viewthread&amp;tid=14356681&amp;extra=" title="捕鱼APP分析TCP登录干货" target="_blank" rel="noopener">捕鱼APP分析TCP登录干货</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;别着急,我还没来得及写&lt;br&gt;着急的话就去这里看吧,之前发在论坛里了:&lt;a href=&quot;https://bbs.125.la/forum.php?mod=viewthread&amp;amp;tid=14356681&amp;amp;extra=&quot; title=&quot;捕鱼APP分析TCP登录干
      
    
    </summary>
    
      <category term="APP逆向" scheme="http://www.loop.wiki/categories/APP%E9%80%86%E5%90%91/"/>
    
    
      <category term="APP逆向" scheme="http://www.loop.wiki/tags/APP%E9%80%86%E5%90%91/"/>
    
      <category term="TCP分析" scheme="http://www.loop.wiki/tags/TCP%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[Linux多进程编程]一、多进程的状态 </title>
    <link href="http://www.loop.wiki/2019/05/26/Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B-%E4%B8%80%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/"/>
    <id>http://www.loop.wiki/2019/05/26/Linux多进程编程-一、多进程的状态/</id>
    <published>2019-05-25T16:25:24.000Z</published>
    <updated>2019-05-25T16:27:00.911Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-进程的执行状态："><a href="#1-进程的执行状态：" class="headerlink" title="1.进程的执行状态："></a>1.进程的执行状态：</h4><p>新建 就绪 运行 阻塞 退出（睡眠）</p><h4 id="2-僵尸进程"><a href="#2-僵尸进程" class="headerlink" title="2.僵尸进程"></a>2.僵尸进程</h4><p>进程运行结束，父进程尚未使用wait()函数族（如使用waitpid()函数）等系统调用来“收尸”，即等待父进程销毁它。处于该状态下的进程“实体”已经放弃了几乎所有的内存空间，没有任何可执行代码，也不能调度，仅仅在进程列表保留一个位置，记载该进程的退出状态等信息供其他进程收集，该子进程将会持续处于僵尸状态。僵尸进程将会导致资源浪费。</p><h4 id="3-孤儿进程"><a href="#3-孤儿进程" class="headerlink" title="3.孤儿进程"></a>3.孤儿进程</h4><p>父进程在子进程之前退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作，最终还是会死掉。</p><h4 id="4-查看状态的方法"><a href="#4-查看状态的方法" class="headerlink" title="4.查看状态的方法"></a>4.查看状态的方法</h4><p>进程的状态,在Linux中可以用ps命令输出查看:</p><p>stat 中的参数意义如下：</p><p>  D 不可中断 Uninterruptible（usually IO）</p><p>  R 正在运行，或在队列中的进程</p><p>  S 处于休眠状态</p><p>  T 停止或被追踪</p><p>  Z 僵尸进程</p><p>  W 进入内存交换（从内核2.6开始无效）</p><p>  X  死掉的进程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-进程的执行状态：&quot;&gt;&lt;a href=&quot;#1-进程的执行状态：&quot; class=&quot;headerlink&quot; title=&quot;1.进程的执行状态：&quot;&gt;&lt;/a&gt;1.进程的执行状态：&lt;/h4&gt;&lt;p&gt;新建 就绪 运行 阻塞 退出（睡眠）&lt;/p&gt;
&lt;h4 id=&quot;2-僵尸进程&quot;
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="Linux多进程编程" scheme="http://www.loop.wiki/tags/Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Linux多进程编程]一、基本函数 </title>
    <link href="http://www.loop.wiki/2019/05/26/Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B-%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0/"/>
    <id>http://www.loop.wiki/2019/05/26/Linux多进程编程-一、基本函数/</id>
    <published>2019-05-25T16:19:22.000Z</published>
    <updated>2019-05-25T16:28:50.798Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-fork"><a href="#1-fork" class="headerlink" title="1.fork"></a>1.fork</h4><blockquote><p>函数头文件及函数原型</p></blockquote><p> #include &lt;unistd.h&gt;<br> pid_t fork(void);</p><p>在Linux中创建一个新进程的唯一方法是使用fork()函数。</p><p>fork()函数是Linux中一个非常重要的函数，用于从已存在的进程中创建一个新进程。新进程称为子进程，而原进程称为父进程。</p><p>使用fork()函数得到的子进程是父进程的一个复制品，它从父进程处继承了整个进程的地址空间，包括进程的上下文、代码段、进程堆栈、内存信息、打开的文件描述符、符号控制设定、进程优先级、进程组号、当前工作目录、根目录、资源限制、信号处理方式和控制终端等， <strong>而子进程所独有的只有它的进程号、资源使用和计时器等。</strong> </p><p>实际是在父进程中执行fork()函数时，父进程会复制一个子进程，而且父子进程的代码从fork()函数的返回开始分别在两个地址空间中同时运行，从而使两个进程分别获得所属fork()函数的返回值，其中在父进程中的返回值是子进程的进程号，而在子进程中返回0，若出错返回-1。也就是说，父进程调用fork会返回非0和-1的值，而子进程会返回0，fork失败时返回-1。可以根据返回值判断是父进程还是子进程。</p><h4 id="2-exit与-exit"><a href="#2-exit与-exit" class="headerlink" title="2.exit与_exit"></a>2.exit与_exit</h4><p>进程的终止分为两种:异常终止和正常终止</p><p>异常终止的情况包括:①进程收到某种信号；②调用abort()函数；</p><p>正常终止的情况包括:①main()函数return；②调用exit()或_exit()函数；<br><strong>exit函数与_exit函数的区别:</strong><br>1.exit()函数执行时会无条件停止剩下的所有操作，清理包括PCB在内的各种数据结构，并终止本进程的运行，在执行推出之前加了若干道工序，它要检查文件的打开情况，把文件缓冲区的内容写回文件，即“清理I/O缓冲”。</p><p>_exit()函数的作用是直接使进程停止运行，清除其使用的内存空间，并清楚其在内核中的数据结构。</p><p>调用_exit()函数时，缓冲区的记录无法输出。</p><p>调用exit()函数时，缓冲区的记录也能正常输出。调用exit()之后，该进程并不会马上完全消失，而是留下了一个成为僵尸（Zombie）的数据结构。</p><h4 id="3-wait和waitpid"><a href="#3-wait和waitpid" class="headerlink" title="3.wait和waitpid"></a>3.wait和waitpid</h4><blockquote><p>函数头文件及函数原型</p></blockquote><p> #include &lt;sys/types.h&gt;</p><p> #include &lt;sys/wait.h&gt;<br> pid_t wait(int <em>status);<br> pid_t waitpid(pid_t pid, int </em>status, int options);</p><p>wait()函数用于使父进程(也就是调用wait()的进程)阻塞，直到一个子进程结束或该进程接收到一个指定的信号为止。如果该父进程没有子进程或它的子进程已经结束，则wait()就会立即返回。其中参数status整型指针是子进程退出时调用exit或_exit使用的参数</p><p>waitpid()的作用和wait()一样，但它并不一定要等待一个终止的子进程，它还有若干选项，如可提供一个非阻塞版本的wait()功能，也能支持作用控制。实际上，wait()函数只是waitpid()函数的一个特例，在Linux内部实现wait()函数时直接调用的就是waitpid()函数。<br><strong>参数pid 为欲等待的子进程识别码, 其他数值意义如下：</strong><br>1、pid&lt;-1等待进程组识别码为pid 绝对值的任何子进程。</p><p>2、pid=-1等待任何子进程, 相当于wait()。</p><p>3、pid=0等待进程组识别码与目前进程相同的任何子进程。</p><p>4、pid&gt;0只等待任何子进程识别码等于pid 的子进程，不管是否有其他子进程结束， 只要指定子进程未结束，一直等。<br><strong>参数option 可以为0或下面的OR 组合：</strong><br>WNOHANG： 如果没有任何已经结束的子进程则马上返回, 不予以等待。</p><p>WUNTRACED：如果子进程进入暂停执行情况则马上返回, 但结束状态不予以理会.子进程的结束状态返回后存于status。</p><h4 id="4-判别结束情况的函数"><a href="#4-判别结束情况的函数" class="headerlink" title="4.判别结束情况的函数:"></a>4.判别结束情况的函数:</h4><p>WIFEXITED(status)： 用来指出子进程是否为正常退出的，如果是，它会返回一个非零值。</p><p>WEXITSTATUS(status)：取得子进程exit()返回的结束代码, 一般会先用WIFEXITED 来判断是否正常结束才能使用此宏。 可以用这个宏来提取子进程的返回值，如果子进程调用exit(5)退出，  WEXITSTATUS(status)就会返回5；如果子进程调用exit(7)退出， WEXITSTATUS(status)就会返回7。如果进程不是正常退出， 也就是说，WIFEXITED返回0，这个值就毫无意义了。</p><p>WIFSIGNALED(status)：如果子进程是因为信号而结束则此宏值为真。</p><p>WTERMSIG(status)： 取得子进程因信号而中止的信号代码, 一般会先用WIFSIGNALED 来判断后才使用此宏。</p><p>WIFSTOPPED(status)： 如果子进程处于暂停执行情况则此宏值为真. 一般只有使用WUNTRACED时才会有此情况。</p><p>WSTOPSIG(status)： 取得引发子进程暂停的信号代码, 一般会先用WIFSTOPPED 来判断后才使用此宏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-fork&quot;&gt;&lt;a href=&quot;#1-fork&quot; class=&quot;headerlink&quot; title=&quot;1.fork&quot;&gt;&lt;/a&gt;1.fork&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;函数头文件及函数原型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; #include
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="Linux多进程编程" scheme="http://www.loop.wiki/tags/Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[gdb调试技巧]一、基本操作</title>
    <link href="http://www.loop.wiki/2019/05/25/gdb%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.loop.wiki/2019/05/25/gdb调试技巧-一、基本操作/</id>
    <published>2019-05-25T15:43:35.000Z</published>
    <updated>2019-05-25T15:52:56.649Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-编译参数"><a href="#1-编译参数" class="headerlink" title="1.编译参数"></a>1.编译参数</h4><p>编译时加上一个-g。默认编译生成的可执行文件是无法使用 gdb 来跟踪或调试的，因为可执行程序中没有可供 gdb 调试使用的特殊信息，为了将必要的调试信息整合到可执行文件中，我们便需要用到 -g 选项，这样生成的可执行程序，倘若出现问题，便可以使用 gdb 找出问题具体出现的位置，便于问题的解决。</p><hr><h4 id="2-开始调试"><a href="#2-开始调试" class="headerlink" title="2.开始调试"></a>2.开始调试</h4><p>gdb xxx(可执行程序)</p><hr><h4 id="3-查看源码"><a href="#3-查看源码" class="headerlink" title="3.查看源码"></a>3.查看源码</h4><p>在gdb中输入l,不能完全显示就多次l</p><hr><h4 id="4-下断点"><a href="#4-下断点" class="headerlink" title="4.下断点"></a>4.下断点</h4><p>方式1、根据函数名，查找符号（symbol）设置断点 </p><p>例子：b func_name</p><p>方式2、根据代码行位置设置断点 </p><p>例子：b /src/codefile.cc:81</p><p>方式3、根据运行时的地址设置断点 </p><p>例子1：b <em>0x5859c0。”</em>“号是必须加在地址前的，0x5859c0为函数指针的地址</p><hr><h4 id="5-查看变量的值"><a href="#5-查看变量的值" class="headerlink" title="5.查看变量的值"></a>5.查看变量的值</h4><p>在gdb中p或者print</p><h5 id="1-程序变量"><a href="#1-程序变量" class="headerlink" title="(1).程序变量"></a>(1).程序变量</h5><p>在GDB中，你可以随时查看以下三种变量的值：</p><p>1、全局变量（所有文件可见的）</p><p>2、静态全局变量（当前文件可见的）</p><p>3、局部变量（当前Scope可见的）</p><p>如果你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，如果一个全局变量和一个函数中的局部变量同名时，如果当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。如果此时你想查看全局变量的值时，你可以使用“::”操作符：</p><p>file::variable</p><p>function::variable</p><p>可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。</p><h5 id="2-查看数组"><a href="#2-查看数组" class="headerlink" title="(2).查看数组"></a>(2).查看数组</h5><p>有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：</p><p>int <em>array = (int </em>) malloc (len * sizeof (int));</p><p>于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：</p><p>p *array@len </p><p>如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。</p><h5 id="3-输出格式"><a href="#3-输出格式" class="headerlink" title="(3).输出格式"></a>(3).输出格式</h5><p>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：</p><p>x 按十六进制格式显示变量。</p><p>d 按十进制格式显示变量。</p><p>u 按十六进制格式显示无符号整型。</p><p>o 按八进制格式显示变量。</p><p>t 按二进制格式显示变量。</p><p>a 按十六进制格式显示变量。</p><p>c 按字符格式显示变量。</p><p>f 按浮点数格式显示变量。</p><p>(4).查看内存</p><p>你可以使用examine命令（简写是x）来查看内存地址中的值。x命令的语法如下所示：</p><p>x/</p><p>n、f、u是可选的参数。</p><p>n 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。</p><p>f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。</p><p>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</p><p>表示一个内存地址。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-编译参数&quot;&gt;&lt;a href=&quot;#1-编译参数&quot; class=&quot;headerlink&quot; title=&quot;1.编译参数&quot;&gt;&lt;/a&gt;1.编译参数&lt;/h4&gt;&lt;p&gt;编译时加上一个-g。默认编译生成的可执行文件是无法使用 gdb 来跟踪或调试的，因为可执行程序中没有可供 g
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="gdb" scheme="http://www.loop.wiki/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>[FFMpeg编程系列]二、小试牛刀Mp4ToWmv</title>
    <link href="http://www.loop.wiki/2019/05/25/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%BA%8C%E3%80%81%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80Mp4ToWmv/"/>
    <id>http://www.loop.wiki/2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/</id>
    <published>2019-05-25T15:39:35.000Z</published>
    <updated>2019-05-25T16:36:13.757Z</updated>
    
    <content type="html"><![CDATA[<p>本文用到的函数:</p><table><thead><tr><th>序号</th><th>函数名</th><th>参数</th><th>注释 </th></tr></thead><tbody><tr><td>1</td><td>av_register_all</td><td>void av_register_all(void)</td><td>注册所有的封装器和解封器</td></tr><tr><td>2</td><td>avformat_open_input</td><td>int avformat_open_input(AVFormatContext <strong>ps, const char <em>url, AVInputFormat </em>fmt, AVDictionary </strong>options)</td><td>创建一个输入的上下文环境</td></tr><tr><td>3</td><td>avformat_alloc_output_context2</td><td>int avformat_alloc_output_context2(AVFormatContext *<em>ctx, AVOutputFormat </em>oformat,const char <em>format_name, const char </em>filename);</td><td>创建一个输出的上下文环境 </td></tr><tr><td>4</td><td>avformat_new_stream</td><td>AVStream <em>avformat_new_stream(AVFormatContext </em>s, const AVCodec *c)</td><td>在指定上下文中插入一个Stream成员 </td></tr><tr><td>5</td><td>avcodec_parameters_copy</td><td>int avcodec_parameters_copy(AVCodecParameters <em>dst, const AVCodecParameters </em>src)</td><td>copyAVCodec的上下文 </td></tr><tr><td>6</td><td>avio_open</td><td>int avio_open(AVIOContext *<em>s, const char </em>url, int flags)</td><td>打开FFmpeg的输入输出文件 </td></tr><tr><td>7</td><td>avformat_write_header</td><td>int avformat_write_header(AVFormatContext *s, AVDictionary **options)</td><td>写视频文件头 </td></tr><tr><td>8</td><td>av_read_frame</td><td>int av_read_frame(AVFormatContext <em>s, AVPacket </em>pkt)</td><td>读入指定上下文的一帧 </td></tr><tr><td>9</td><td>av_rescale_q_rnd</td><td>int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq,enum AVRounding rnd)</td><td>换算比例 </td></tr><tr><td>10</td><td>av_write_frame</td><td>int av_write_frame(AVFormatContext <em>s, AVPacket </em>pkt)</td><td>向指定上下文写入一帧 </td></tr><tr><td>11</td><td>av_packet_unref</td><td>void av_packet_unref(AVPacket *pkt)</td><td>释放AVPacket内存 </td></tr><tr><td>12</td><td>av_write_trailer</td><td>int av_write_trailer(AVFormatContext *s)</td><td>写视频文件尾 </td></tr><tr><td>13</td><td>avio_close</td><td>int avio_close(AVIOContext *s)</td><td>关闭FFmpeg的输入输出文件 </td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/9326181-afe25e919ac6812b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0001.jpg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"avformat.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"avcodec.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"avutil.lib"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> infile[] = <span class="string">"2.mp4"</span>;</span><br><span class="line"><span class="keyword">char</span> outfile[] = <span class="string">"output.mov"</span>;</span><br><span class="line">av_register_all();<span class="comment">//注册所有的封装器和解封器</span></span><br><span class="line">AVFormatContext* inputFormatCtx = <span class="literal">NULL</span>;</span><br><span class="line">avformat_open_input(&amp;inputFormatCtx, infile, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!inputFormatCtx) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"open file fail!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVFormatContext* outputFormatCtx = <span class="literal">NULL</span>;</span><br><span class="line">avformat_alloc_output_context2(&amp;outputFormatCtx, <span class="literal">NULL</span>, <span class="literal">NULL</span>, outfile);</span><br><span class="line"><span class="keyword">if</span> (!outputFormatCtx)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"create OutputCtx fail!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">AVStream *videoStream = avformat_new_stream(outputFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line">AVStream *audioStream= avformat_new_stream(outputFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line">avcodec_parameters_copy(videoStream-&gt;codecpar, inputFormatCtx-&gt;streams[<span class="number">0</span>]-&gt;codecpar);</span><br><span class="line">avcodec_parameters_copy(audioStream-&gt;codecpar, inputFormatCtx-&gt;streams[<span class="number">0</span>]-&gt;codecpar);</span><br><span class="line">videoStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">audioStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">av_dump_format(inputFormatCtx, <span class="number">0</span>, infile, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"============================================"</span>);</span><br><span class="line">av_dump_format(outputFormatCtx, <span class="number">0</span>, outfile, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret=avio_open(&amp;outputFormatCtx-&gt;pb, outfile, AVIO_FLAG_WRITE);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"avio open failed!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">avformat_write_header(outputFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write header failed!\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">AVPacket pkt;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;;) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ret=av_read_frame(inputFormatCtx, &amp;pkt);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pkt.pts=av_rescale_q_rnd(pkt.pts,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));</span><br><span class="line">pkt.dts=av_rescale_q_rnd(pkt.dts,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">pkt.pos = <span class="number">-1</span>;</span><br><span class="line">pkt.duration= av_rescale_q_rnd(pkt.duration,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">av_write_frame(outputFormatCtx, &amp;pkt);</span><br><span class="line">av_packet_unref(&amp;pkt);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">av_write_trailer(outputFormatCtx);</span><br><span class="line">avio_close(outputFormatCtx-&gt;pb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文用到的函数:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;注释 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;av_registe
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>[FFMpeg编程系列]一、开发环境配置</title>
    <link href="http://www.loop.wiki/2019/05/25/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%B8%80%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.loop.wiki/2019/05/25/FFMpeg编程系列-一、开发环境配置/</id>
    <published>2019-05-25T03:16:52.000Z</published>
    <updated>2019-05-25T03:49:21.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SDK下载"><a href="#1-SDK下载" class="headerlink" title="1.SDK下载"></a>1.SDK下载</h1><h4 id="下载地址-点击下载"><a href="#下载地址-点击下载" class="headerlink" title="下载地址: 点击下载"></a>下载地址: <a href="http://ffmpeg.club/ffmpeg_download.html" title="With a Title" target="_blank" rel="noopener">点击下载</a></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-43622ecdf26d6313.png?imageMogr2/auto-orient/" alt="avatar" title="在这里我们选择Windows开发,以下都为Windows系统为主讲述">                </div>                <div class="image-caption">在这里我们选择Windows开发,以下都为Windows系统为主讲述</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-321e42dae9d409e6.png?imageMogr2/auto-orient/" alt="avatar" title="文件目录结构如上">                </div>                <div class="image-caption">文件目录结构如上</div>            </figure><p>bin:包含动态链接库dll,我们也后面也会将这个文件夹设为工程的输出目录和调试目录<br>include:头文件目录<br>lib:库目录<br>src:我们的工程存放目录</p><hr><h1 id="2-VS属性配置"><a href="#2-VS属性配置" class="headerlink" title="2.VS属性配置"></a>2.VS属性配置</h1><h3 id="本文的VS版本为2017"><a href="#本文的VS版本为2017" class="headerlink" title="本文的VS版本为2017"></a>本文的VS版本为2017</h3><h4 id="①-创建项目"><a href="#①-创建项目" class="headerlink" title="①.创建项目"></a>①.创建项目</h4><p>我们来新建一个控制台程序,名字为mp4_to_wmv_test,工程位置我们选择src所在路径,记得取消勾选为解决方案创建目录<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-a0bfac7f5a9ebaeb.png?imageMogr2/auto-orient/" alt="avatar" title="如图">                </div>                <div class="image-caption">如图</div>            </figure></p><h4 id="②-设置工作目录、附加包含目录、附加目录库、输出目录"><a href="#②-设置工作目录、附加包含目录、附加目录库、输出目录" class="headerlink" title="②.设置工作目录、附加包含目录、附加目录库、输出目录"></a>②.设置工作目录、附加包含目录、附加目录库、输出目录</h4><p>输出目录:项目-属性-常规-输出目录 设置为../../bin/</p><p>工作目录:项目-属性-调试-工作目录 设置为../../bin/</p><p>附加包含目录:项目-属性-C/C++-常规-附加包含目录 设置为../../include/</p><p>附加库目录:项目-属性-链接器-常规-附加库目录 设置为../../lib/</p><h4 id="③-测试"><a href="#③-测试" class="headerlink" title="③.测试"></a>③.测试</h4><p>代码与效果图如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-36e093a373399e2f.png?imageMogr2/auto-orient/" alt="avatar" title="如图">                </div>                <div class="image-caption">如图</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-SDK下载&quot;&gt;&lt;a href=&quot;#1-SDK下载&quot; class=&quot;headerlink&quot; title=&quot;1.SDK下载&quot;&gt;&lt;/a&gt;1.SDK下载&lt;/h1&gt;&lt;h4 id=&quot;下载地址-点击下载&quot;&gt;&lt;a href=&quot;#下载地址-点击下载&quot; class=&quot;header
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.loop.wiki/2019/05/24/hello-world/"/>
    <id>http://www.loop.wiki/2019/05/24/hello-world/</id>
    <published>2019-05-24T10:44:41.460Z</published>
    <updated>2019-05-25T21:25:02.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎访问鄙博客"><a href="#欢迎访问鄙博客" class="headerlink" title="欢迎访问鄙博客"></a>欢迎访问鄙博客</h1><h2 id="本博客用于个人文章记录-分类包括C-、易语言、APP逆向等"><a href="#本博客用于个人文章记录-分类包括C-、易语言、APP逆向等" class="headerlink" title="本博客用于个人文章记录,分类包括C++、易语言、APP逆向等"></a>本博客用于个人文章记录,分类包括C++、易语言、APP逆向等</h2><h2 id="欢迎加好友一起讨论技术！"><a href="#欢迎加好友一起讨论技术！" class="headerlink" title="欢迎加好友一起讨论技术！"></a>欢迎加好友一起讨论技术！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎访问鄙博客&quot;&gt;&lt;a href=&quot;#欢迎访问鄙博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎访问鄙博客&quot;&gt;&lt;/a&gt;欢迎访问鄙博客&lt;/h1&gt;&lt;h2 id=&quot;本博客用于个人文章记录-分类包括C-、易语言、APP逆向等&quot;&gt;&lt;a href=&quot;#本博客用
      
    
    </summary>
    
      <category term="首页寄语" scheme="http://www.loop.wiki/categories/%E9%A6%96%E9%A1%B5%E5%AF%84%E8%AF%AD/"/>
    
    
  </entry>
  
</feed>
