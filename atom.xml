<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>循环不计次</title>
  
  <subtitle>热爱C++与易语言的程序员  QQ:3476146</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.loop.wiki/"/>
  <updated>2019-05-25T15:41:25.065Z</updated>
  <id>http://www.loop.wiki/</id>
  
  <author>
    <name>循环不计次</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[FFMpeg编程系列]二、小试牛刀Mp4ToWmv</title>
    <link href="http://www.loop.wiki/2019/05/25/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%BA%8C%E3%80%81%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80Mp4ToWmv/"/>
    <id>http://www.loop.wiki/2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/</id>
    <published>2019-05-25T15:39:35.000Z</published>
    <updated>2019-05-25T15:41:25.065Z</updated>
    
    <content type="html"><![CDATA[<p>本文用到的函数:<br>| 序号 | 函数名 | 参数 | 注释 |<br>| ————- |:————-:| —–:| —–:|<br>|1 | av_register_all | void av_register_all(void) | 注册所有的封装器和解封器 |<br>| 2 | avformat_open_input|int avformat_open_input(AVFormatContext <strong>ps, const char <em>url, AVInputFormat </em>fmt, AVDictionary </strong>options) | 创建一个输入的上下文环境 |<br>| 3 | avformat_alloc_output_context2 | int avformat_alloc_output_context2(AVFormatContext <strong>ctx, AVOutputFormat <em>oformat,const char </em>format_name, const char <em>filename);| 创建一个输出的上下文环境 |<br>| 4 | avformat_new_stream|AVStream </em>avformat_new_stream(AVFormatContext <em>s, const AVCodec </em>c) | 在指定上下文中插入一个Stream成员 |<br>| 5 | avcodec_parameters_copy | int avcodec_parameters_copy(AVCodecParameters <em>dst, const AVCodecParameters </em>src) | copyAVCodec的上下文 |<br>|6|avio_open|int avio_open(AVIOContext </strong>s, const char <em>url, int flags)|打开FFmpeg的输入输出文件|<br>|7|avformat_write_header|int avformat_write_header(AVFormatContext </em>s, AVDictionary *<em>options)|写视频文件头|<br>|8|av_read_frame|int av_read_frame(AVFormatContext </em>s, AVPacket <em>pkt)|读入指定上下文的一帧|<br>|9|av_rescale_q_rnd|int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq,enum AVRounding rnd)|换算比例|<br>|10|av_write_frame|int av_write_frame(AVFormatContext </em>s, AVPacket <em>pkt)|向指定上下文写入一帧|<br>|11|av_packet_unref|void av_packet_unref(AVPacket </em>pkt)|释放AVPacket内存|<br>|12|av_write_trailer|int av_write_trailer(AVFormatContext <em>s)|写视频文件尾|<br>|13|avio_close|int avio_close(AVIOContext </em>s)|关闭FFmpeg的输入输出文件|</p><p><img src="https://upload-images.jianshu.io/upload_images/9326181-afe25e919ac6812b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0001.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#include&lt;libavformat/avformat.h&gt;</span><br><span class="line">#include&lt;libavcodec/avcodec.h&gt;</span><br><span class="line">&#125;</span><br><span class="line">#pragma comment(lib,&quot;avformat.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;avcodec.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;avutil.lib&quot;)</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char infile[] = &quot;2.mp4&quot;;</span><br><span class="line">char outfile[] = &quot;output.mov&quot;;</span><br><span class="line">av_register_all();//注册所有的封装器和解封器</span><br><span class="line">AVFormatContext* inputFormatCtx = NULL;</span><br><span class="line">avformat_open_input(&amp;inputFormatCtx, infile, NULL, NULL);</span><br><span class="line">if (!inputFormatCtx) &#123;</span><br><span class="line">printf(&quot;open file fail!\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVFormatContext* outputFormatCtx = NULL;</span><br><span class="line">avformat_alloc_output_context2(&amp;outputFormatCtx, NULL, NULL, outfile);</span><br><span class="line">if (!outputFormatCtx)&#123;</span><br><span class="line">printf(&quot;create OutputCtx fail!\n&quot;);</span><br><span class="line">return -2;</span><br><span class="line">&#125;</span><br><span class="line">AVStream *videoStream = avformat_new_stream(outputFormatCtx, NULL);</span><br><span class="line">AVStream *audioStream= avformat_new_stream(outputFormatCtx, NULL);</span><br><span class="line">avcodec_parameters_copy(videoStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar);</span><br><span class="line">avcodec_parameters_copy(audioStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar);</span><br><span class="line">videoStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">audioStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">av_dump_format(inputFormatCtx, 0, infile, 0);</span><br><span class="line">printf(&quot;============================================&quot;);</span><br><span class="line">av_dump_format(outputFormatCtx, 0, outfile, 1);</span><br><span class="line"></span><br><span class="line">int ret=avio_open(&amp;outputFormatCtx-&gt;pb, outfile, AVIO_FLAG_WRITE);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">printf(&quot;avio open failed!\n&quot;);</span><br><span class="line">return -3;</span><br><span class="line">&#125;</span><br><span class="line">avformat_write_header(outputFormatCtx, NULL);</span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;write header failed!\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">AVPacket pkt;</span><br><span class="line">int i = 0;</span><br><span class="line">for (;;) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ret=av_read_frame(inputFormatCtx, &amp;pkt);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">pkt.pts=av_rescale_q_rnd(pkt.pts,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));</span><br><span class="line">pkt.dts=av_rescale_q_rnd(pkt.dts,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">pkt.pos = -1;</span><br><span class="line">pkt.duration= av_rescale_q_rnd(pkt.duration,</span><br><span class="line">inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base,</span><br><span class="line">(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">av_write_frame(outputFormatCtx, &amp;pkt);</span><br><span class="line">av_packet_unref(&amp;pkt);</span><br><span class="line">cout &lt;&lt;&quot;.&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;\n=========================&quot; &lt;&lt; endl;</span><br><span class="line">av_write_trailer(outputFormatCtx);</span><br><span class="line">avio_close(outputFormatCtx-&gt;pb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文用到的函数:&lt;br&gt;| 序号 | 函数名 | 参数 | 注释 |&lt;br&gt;| ————- |:————-:| —–:| —–:|&lt;br&gt;|1 | av_register_all | void av_register_all(void) | 注册所有的封装器和解封器 |&lt;b
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>[FFMpeg编程系列]一、开发环境配置</title>
    <link href="http://www.loop.wiki/2019/05/25/FFMpeg%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97-%E4%B8%80%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.loop.wiki/2019/05/25/FFMpeg编程系列-一、开发环境配置/</id>
    <published>2019-05-25T03:16:52.000Z</published>
    <updated>2019-05-25T03:49:21.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SDK下载"><a href="#1-SDK下载" class="headerlink" title="1.SDK下载"></a>1.SDK下载</h1><h4 id="下载地址-点击下载"><a href="#下载地址-点击下载" class="headerlink" title="下载地址: 点击下载"></a>下载地址: <a href="http://ffmpeg.club/ffmpeg_download.html" title="With a Title" target="_blank" rel="noopener">点击下载</a></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-43622ecdf26d6313.png?imageMogr2/auto-orient/" alt="avatar" title="在这里我们选择Windows开发,以下都为Windows系统为主讲述">                </div>                <div class="image-caption">在这里我们选择Windows开发,以下都为Windows系统为主讲述</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-321e42dae9d409e6.png?imageMogr2/auto-orient/" alt="avatar" title="文件目录结构如上">                </div>                <div class="image-caption">文件目录结构如上</div>            </figure><p>bin:包含动态链接库dll,我们也后面也会将这个文件夹设为工程的输出目录和调试目录<br>include:头文件目录<br>lib:库目录<br>src:我们的工程存放目录</p><hr><h1 id="2-VS属性配置"><a href="#2-VS属性配置" class="headerlink" title="2.VS属性配置"></a>2.VS属性配置</h1><h3 id="本文的VS版本为2017"><a href="#本文的VS版本为2017" class="headerlink" title="本文的VS版本为2017"></a>本文的VS版本为2017</h3><h4 id="①-创建项目"><a href="#①-创建项目" class="headerlink" title="①.创建项目"></a>①.创建项目</h4><p>我们来新建一个控制台程序,名字为mp4_to_wmv_test,工程位置我们选择src所在路径,记得取消勾选为解决方案创建目录<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-a0bfac7f5a9ebaeb.png?imageMogr2/auto-orient/" alt="avatar" title="如图">                </div>                <div class="image-caption">如图</div>            </figure></p><h4 id="②-设置工作目录、附加包含目录、附加目录库、输出目录"><a href="#②-设置工作目录、附加包含目录、附加目录库、输出目录" class="headerlink" title="②.设置工作目录、附加包含目录、附加目录库、输出目录"></a>②.设置工作目录、附加包含目录、附加目录库、输出目录</h4><p>输出目录:项目-属性-常规-输出目录 设置为../../bin/</p><p>工作目录:项目-属性-调试-工作目录 设置为../../bin/</p><p>附加包含目录:项目-属性-C/C++-常规-附加包含目录 设置为../../include/</p><p>附加库目录:项目-属性-链接器-常规-附加库目录 设置为../../lib/</p><h4 id="③-测试"><a href="#③-测试" class="headerlink" title="③.测试"></a>③.测试</h4><p>代码与效果图如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/9326181-36e093a373399e2f.png?imageMogr2/auto-orient/" alt="avatar" title="如图">                </div>                <div class="image-caption">如图</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-SDK下载&quot;&gt;&lt;a href=&quot;#1-SDK下载&quot; class=&quot;headerlink&quot; title=&quot;1.SDK下载&quot;&gt;&lt;/a&gt;1.SDK下载&lt;/h1&gt;&lt;h4 id=&quot;下载地址-点击下载&quot;&gt;&lt;a href=&quot;#下载地址-点击下载&quot; class=&quot;header
      
    
    </summary>
    
      <category term="C++" scheme="http://www.loop.wiki/categories/C/"/>
    
    
      <category term="FFMpeg" scheme="http://www.loop.wiki/tags/FFMpeg/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.loop.wiki/2019/05/24/hello-world/"/>
    <id>http://www.loop.wiki/2019/05/24/hello-world/</id>
    <published>2019-05-24T10:44:41.460Z</published>
    <updated>2019-05-24T12:54:19.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎访问鄙博客"><a href="#欢迎访问鄙博客" class="headerlink" title="欢迎访问鄙博客"></a>欢迎访问鄙博客</h1><h2 id="本博客用于个人文章记录-分类包括C-、易语言、APP逆向等"><a href="#本博客用于个人文章记录-分类包括C-、易语言、APP逆向等" class="headerlink" title="本博客用于个人文章记录,分类包括C++、易语言、APP逆向等"></a>本博客用于个人文章记录,分类包括C++、易语言、APP逆向等</h2><h2 id="欢迎加好友一起讨论技术！"><a href="#欢迎加好友一起讨论技术！" class="headerlink" title="欢迎加好友一起讨论技术！"></a>欢迎加好友一起讨论技术！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎访问鄙博客&quot;&gt;&lt;a href=&quot;#欢迎访问鄙博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎访问鄙博客&quot;&gt;&lt;/a&gt;欢迎访问鄙博客&lt;/h1&gt;&lt;h2 id=&quot;本博客用于个人文章记录-分类包括C-、易语言、APP逆向等&quot;&gt;&lt;a href=&quot;#本博客用
      
    
    </summary>
    
      <category term="首页寄语" scheme="http://www.loop.wiki/categories/%E9%A6%96%E9%A1%B5%E5%AF%84%E8%AF%AD/"/>
    
    
  </entry>
  
</feed>
