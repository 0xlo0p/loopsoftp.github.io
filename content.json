{"meta":{"title":"循环不计次","subtitle":"热爱C++与易语言的程序员  QQ:3476146","description":"C++、Elanguage的分享天地","author":"循环不计次","url":"http://www.loop.wiki","root":"/"},"pages":[{"title":"categories","date":"2019-05-24T11:09:27.000Z","updated":"2019-05-24T11:21:43.548Z","comments":false,"path":"categories/index.html","permalink":"http://www.loop.wiki/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-24T10:57:47.000Z","updated":"2019-05-24T11:22:37.564Z","comments":false,"path":"tags/index.html","permalink":"http://www.loop.wiki/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[gdb调试技巧]一、基本操作","slug":"gdb调试技巧-一、基本操作","date":"2019-05-25T15:43:35.000Z","updated":"2019-05-25T15:52:56.649Z","comments":true,"path":"2019/05/25/gdb调试技巧-一、基本操作/","link":"","permalink":"http://www.loop.wiki/2019/05/25/gdb调试技巧-一、基本操作/","excerpt":"","text":"1.编译参数编译时加上一个-g。默认编译生成的可执行文件是无法使用 gdb 来跟踪或调试的，因为可执行程序中没有可供 gdb 调试使用的特殊信息，为了将必要的调试信息整合到可执行文件中，我们便需要用到 -g 选项，这样生成的可执行程序，倘若出现问题，便可以使用 gdb 找出问题具体出现的位置，便于问题的解决。 2.开始调试gdb xxx(可执行程序) 3.查看源码在gdb中输入l,不能完全显示就多次l 4.下断点方式1、根据函数名，查找符号（symbol）设置断点 例子：b func_name 方式2、根据代码行位置设置断点 例子：b /src/codefile.cc:81 方式3、根据运行时的地址设置断点 例子1：b 0x5859c0。”“号是必须加在地址前的，0x5859c0为函数指针的地址 5.查看变量的值在gdb中p或者print (1).程序变量在GDB中，你可以随时查看以下三种变量的值： 1、全局变量（所有文件可见的） 2、静态全局变量（当前文件可见的） 3、局部变量（当前Scope可见的） 如果你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，如果一个全局变量和一个函数中的局部变量同名时，如果当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。如果此时你想查看全局变量的值时，你可以使用“::”操作符： file::variable function::variable 可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。 (2).查看数组有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句： int array = (int ) malloc (len * sizeof (int)); 于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值： p *array@len 如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。 (3).输出格式一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式： x 按十六进制格式显示变量。 d 按十进制格式显示变量。 u 按十六进制格式显示无符号整型。 o 按八进制格式显示变量。 t 按二进制格式显示变量。 a 按十六进制格式显示变量。 c 按字符格式显示变量。 f 按浮点数格式显示变量。 (4).查看内存 你可以使用examine命令（简写是x）来查看内存地址中的值。x命令的语法如下所示： x/ n、f、u是可选的参数。 n 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。 f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。 u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。 表示一个内存地址。","categories":[{"name":"C++","slug":"C","permalink":"http://www.loop.wiki/categories/C/"}],"tags":[{"name":"gdb","slug":"gdb","permalink":"http://www.loop.wiki/tags/gdb/"}]},{"title":"[FFMpeg编程系列]二、小试牛刀Mp4ToWmv","slug":"FFMpeg编程系列-二、小试牛刀Mp4ToWmv","date":"2019-05-25T15:39:35.000Z","updated":"2019-05-25T16:09:48.992Z","comments":true,"path":"2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/","link":"","permalink":"http://www.loop.wiki/2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/","excerpt":"","text":"本文用到的函数:序号 | 函数名 | 参数 | 注释-|-|-|-1 | av_register_all | void av_register_all(void) | 注册所有的封装器和解封器2 | avformat_open_input|int avformat_open_input(AVFormatContext ps, const char url, AVInputFormat fmt, AVDictionary options) | 创建一个输入的上下文环境3 | avformat_alloc_output_context2 | int avformat_alloc_output_context2(AVFormatContext ctx, AVOutputFormat oformat,const char format_name, const char filename);| 创建一个输出的上下文环境4 | avformat_new_stream|AVStream avformat_new_stream(AVFormatContext s, const AVCodec c) | 在指定上下文中插入一个Stream成员5 | avcodec_parameters_copy | int avcodec_parameters_copy(AVCodecParameters dst, const AVCodecParameters src) | copyAVCodec的上下文6 | avio_open |int avio_open(AVIOContext s, const char url, int flags)|打开FFmpeg的输入输出文件7 | avformat_write_header|int avformat_write_header(AVFormatContext s, AVDictionary *options)|写视频文件头8 | av_read_frame|int av_read_frame(AVFormatContext s, AVPacket pkt)|读入指定上下文的一帧9 | av_rescale_q_rnd|int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq,enum AVRounding rnd)|换算比例10 | av_write_frame|int av_write_frame(AVFormatContext s, AVPacket pkt)|向指定上下文写入一帧11 | av_packet_unref|void av_packet_unref(AVPacket pkt)|释放AVPacket内存12 | av_write_trailer|int av_write_trailer(AVFormatContext s)|写视频文件尾13 | avio_close|int avio_close(AVIOContext s)|关闭FFmpeg的输入输出文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;extern &quot;C&quot; &#123;#include&lt;libavformat/avformat.h&gt;#include&lt;libavcodec/avcodec.h&gt;&#125;#pragma comment(lib,&quot;avformat.lib&quot;)#pragma comment(lib,&quot;avcodec.lib&quot;)#pragma comment(lib,&quot;avutil.lib&quot;)using namespace std;int main()&#123; char infile[] = &quot;2.mp4&quot;; char outfile[] = &quot;output.mov&quot;; av_register_all();//注册所有的封装器和解封器 AVFormatContext* inputFormatCtx = NULL; avformat_open_input(&amp;inputFormatCtx, infile, NULL, NULL); if (!inputFormatCtx) &#123; printf(&quot;open file fail!\\n&quot;); return -1; &#125; AVFormatContext* outputFormatCtx = NULL; avformat_alloc_output_context2(&amp;outputFormatCtx, NULL, NULL, outfile); if (!outputFormatCtx)&#123; printf(&quot;create OutputCtx fail!\\n&quot;); return -2; &#125; AVStream *videoStream = avformat_new_stream(outputFormatCtx, NULL); AVStream *audioStream= avformat_new_stream(outputFormatCtx, NULL); avcodec_parameters_copy(videoStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar); avcodec_parameters_copy(audioStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar); videoStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO; audioStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO; av_dump_format(inputFormatCtx, 0, infile, 0); printf(&quot;============================================&quot;); av_dump_format(outputFormatCtx, 0, outfile, 1); int ret=avio_open(&amp;outputFormatCtx-&gt;pb, outfile, AVIO_FLAG_WRITE); if (ret &lt; 0) &#123; printf(&quot;avio open failed!\\n&quot;); return -3; &#125; avformat_write_header(outputFormatCtx, NULL); if (ret &lt; 0) &#123; printf(&quot;write header failed!\\n&quot;); &#125; AVPacket pkt; int i = 0; for (;;) &#123; ret=av_read_frame(inputFormatCtx, &amp;pkt); if (ret &lt; 0) &#123; break; &#125; pkt.pts=av_rescale_q_rnd(pkt.pts, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX)); pkt.dts=av_rescale_q_rnd(pkt.dts, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)); pkt.pos = -1; pkt.duration= av_rescale_q_rnd(pkt.duration, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)); av_write_frame(outputFormatCtx, &amp;pkt); av_packet_unref(&amp;pkt); cout &lt;&lt;&quot;.&quot;; &#125; cout &lt;&lt; &quot;\\n=========================&quot; &lt;&lt; endl; av_write_trailer(outputFormatCtx); avio_close(outputFormatCtx-&gt;pb);&#125;","categories":[{"name":"C++","slug":"C","permalink":"http://www.loop.wiki/categories/C/"}],"tags":[{"name":"FFMpeg","slug":"FFMpeg","permalink":"http://www.loop.wiki/tags/FFMpeg/"}]},{"title":"[FFMpeg编程系列]一、开发环境配置","slug":"FFMpeg编程系列-一、开发环境配置","date":"2019-05-25T03:16:52.000Z","updated":"2019-05-25T03:49:21.058Z","comments":true,"path":"2019/05/25/FFMpeg编程系列-一、开发环境配置/","link":"","permalink":"http://www.loop.wiki/2019/05/25/FFMpeg编程系列-一、开发环境配置/","excerpt":"","text":"1.SDK下载下载地址: 点击下载 在这里我们选择Windows开发,以下都为Windows系统为主讲述 文件目录结构如上 bin:包含动态链接库dll,我们也后面也会将这个文件夹设为工程的输出目录和调试目录include:头文件目录lib:库目录src:我们的工程存放目录 2.VS属性配置本文的VS版本为2017①.创建项目我们来新建一个控制台程序,名字为mp4_to_wmv_test,工程位置我们选择src所在路径,记得取消勾选为解决方案创建目录 如图 ②.设置工作目录、附加包含目录、附加目录库、输出目录输出目录:项目-属性-常规-输出目录 设置为../../bin/ 工作目录:项目-属性-调试-工作目录 设置为../../bin/ 附加包含目录:项目-属性-C/C++-常规-附加包含目录 设置为../../include/ 附加库目录:项目-属性-链接器-常规-附加库目录 设置为../../lib/ ③.测试代码与效果图如下: 如图","categories":[{"name":"C++","slug":"C","permalink":"http://www.loop.wiki/categories/C/"}],"tags":[{"name":"FFMpeg","slug":"FFMpeg","permalink":"http://www.loop.wiki/tags/FFMpeg/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-24T10:44:41.460Z","updated":"2019-05-24T12:54:19.621Z","comments":true,"path":"2019/05/24/hello-world/","link":"","permalink":"http://www.loop.wiki/2019/05/24/hello-world/","excerpt":"","text":"欢迎访问鄙博客本博客用于个人文章记录,分类包括C++、易语言、APP逆向等欢迎加好友一起讨论技术！","categories":[{"name":"首页寄语","slug":"首页寄语","permalink":"http://www.loop.wiki/categories/首页寄语/"}],"tags":[]}]}