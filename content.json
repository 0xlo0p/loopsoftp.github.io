{"meta":{"title":"循环不计次","subtitle":"热爱C++与易语言的程序员  QQ:3476146","description":"C++、Elanguage的分享天地","author":"循环不计次","url":"http://www.loop.wiki","root":"/"},"pages":[{"title":"categories","date":"2019-05-24T11:09:27.000Z","updated":"2019-05-24T11:21:43.548Z","comments":false,"path":"categories/index.html","permalink":"http://www.loop.wiki/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-24T10:57:47.000Z","updated":"2019-05-24T11:22:37.564Z","comments":false,"path":"tags/index.html","permalink":"http://www.loop.wiki/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[FFMpeg编程系列]二、小试牛刀Mp4ToWmv","slug":"FFMpeg编程系列-二、小试牛刀Mp4ToWmv","date":"2019-05-25T15:39:35.000Z","updated":"2019-05-25T15:41:25.065Z","comments":true,"path":"2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/","link":"","permalink":"http://www.loop.wiki/2019/05/25/FFMpeg编程系列-二、小试牛刀Mp4ToWmv/","excerpt":"","text":"本文用到的函数:| 序号 | 函数名 | 参数 | 注释 || ————- |:————-:| —–:| —–:||1 | av_register_all | void av_register_all(void) | 注册所有的封装器和解封器 || 2 | avformat_open_input|int avformat_open_input(AVFormatContext ps, const char url, AVInputFormat fmt, AVDictionary options) | 创建一个输入的上下文环境 || 3 | avformat_alloc_output_context2 | int avformat_alloc_output_context2(AVFormatContext ctx, AVOutputFormat oformat,const char format_name, const char filename);| 创建一个输出的上下文环境 || 4 | avformat_new_stream|AVStream avformat_new_stream(AVFormatContext s, const AVCodec c) | 在指定上下文中插入一个Stream成员 || 5 | avcodec_parameters_copy | int avcodec_parameters_copy(AVCodecParameters dst, const AVCodecParameters src) | copyAVCodec的上下文 ||6|avio_open|int avio_open(AVIOContext s, const char url, int flags)|打开FFmpeg的输入输出文件||7|avformat_write_header|int avformat_write_header(AVFormatContext s, AVDictionary *options)|写视频文件头||8|av_read_frame|int av_read_frame(AVFormatContext s, AVPacket pkt)|读入指定上下文的一帧||9|av_rescale_q_rnd|int64_t av_rescale_q_rnd(int64_t a, AVRational bq, AVRational cq,enum AVRounding rnd)|换算比例||10|av_write_frame|int av_write_frame(AVFormatContext s, AVPacket pkt)|向指定上下文写入一帧||11|av_packet_unref|void av_packet_unref(AVPacket pkt)|释放AVPacket内存||12|av_write_trailer|int av_write_trailer(AVFormatContext s)|写视频文件尾||13|avio_close|int avio_close(AVIOContext s)|关闭FFmpeg的输入输出文件| 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;extern &quot;C&quot; &#123;#include&lt;libavformat/avformat.h&gt;#include&lt;libavcodec/avcodec.h&gt;&#125;#pragma comment(lib,&quot;avformat.lib&quot;)#pragma comment(lib,&quot;avcodec.lib&quot;)#pragma comment(lib,&quot;avutil.lib&quot;)using namespace std;int main()&#123; char infile[] = &quot;2.mp4&quot;; char outfile[] = &quot;output.mov&quot;; av_register_all();//注册所有的封装器和解封器 AVFormatContext* inputFormatCtx = NULL; avformat_open_input(&amp;inputFormatCtx, infile, NULL, NULL); if (!inputFormatCtx) &#123; printf(&quot;open file fail!\\n&quot;); return -1; &#125; AVFormatContext* outputFormatCtx = NULL; avformat_alloc_output_context2(&amp;outputFormatCtx, NULL, NULL, outfile); if (!outputFormatCtx)&#123; printf(&quot;create OutputCtx fail!\\n&quot;); return -2; &#125; AVStream *videoStream = avformat_new_stream(outputFormatCtx, NULL); AVStream *audioStream= avformat_new_stream(outputFormatCtx, NULL); avcodec_parameters_copy(videoStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar); avcodec_parameters_copy(audioStream-&gt;codecpar, inputFormatCtx-&gt;streams[0]-&gt;codecpar); videoStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO; audioStream-&gt;codecpar-&gt;codec_type = AVMEDIA_TYPE_VIDEO; av_dump_format(inputFormatCtx, 0, infile, 0); printf(&quot;============================================&quot;); av_dump_format(outputFormatCtx, 0, outfile, 1); int ret=avio_open(&amp;outputFormatCtx-&gt;pb, outfile, AVIO_FLAG_WRITE); if (ret &lt; 0) &#123; printf(&quot;avio open failed!\\n&quot;); return -3; &#125; avformat_write_header(outputFormatCtx, NULL); if (ret &lt; 0) &#123; printf(&quot;write header failed!\\n&quot;); &#125; AVPacket pkt; int i = 0; for (;;) &#123; ret=av_read_frame(inputFormatCtx, &amp;pkt); if (ret &lt; 0) &#123; break; &#125; pkt.pts=av_rescale_q_rnd(pkt.pts, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX)); pkt.dts=av_rescale_q_rnd(pkt.dts, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)); pkt.pos = -1; pkt.duration= av_rescale_q_rnd(pkt.duration, inputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, outputFormatCtx-&gt;streams[pkt.stream_index]-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)); av_write_frame(outputFormatCtx, &amp;pkt); av_packet_unref(&amp;pkt); cout &lt;&lt;&quot;.&quot;; &#125; cout &lt;&lt; &quot;\\n=========================&quot; &lt;&lt; endl; av_write_trailer(outputFormatCtx); avio_close(outputFormatCtx-&gt;pb);&#125;","categories":[{"name":"C++","slug":"C","permalink":"http://www.loop.wiki/categories/C/"}],"tags":[{"name":"FFMpeg","slug":"FFMpeg","permalink":"http://www.loop.wiki/tags/FFMpeg/"}]},{"title":"[FFMpeg编程系列]一、开发环境配置","slug":"FFMpeg编程系列-一、开发环境配置","date":"2019-05-25T03:16:52.000Z","updated":"2019-05-25T03:49:21.058Z","comments":true,"path":"2019/05/25/FFMpeg编程系列-一、开发环境配置/","link":"","permalink":"http://www.loop.wiki/2019/05/25/FFMpeg编程系列-一、开发环境配置/","excerpt":"","text":"1.SDK下载下载地址: 点击下载 在这里我们选择Windows开发,以下都为Windows系统为主讲述 文件目录结构如上 bin:包含动态链接库dll,我们也后面也会将这个文件夹设为工程的输出目录和调试目录include:头文件目录lib:库目录src:我们的工程存放目录 2.VS属性配置本文的VS版本为2017①.创建项目我们来新建一个控制台程序,名字为mp4_to_wmv_test,工程位置我们选择src所在路径,记得取消勾选为解决方案创建目录 如图 ②.设置工作目录、附加包含目录、附加目录库、输出目录输出目录:项目-属性-常规-输出目录 设置为../../bin/ 工作目录:项目-属性-调试-工作目录 设置为../../bin/ 附加包含目录:项目-属性-C/C++-常规-附加包含目录 设置为../../include/ 附加库目录:项目-属性-链接器-常规-附加库目录 设置为../../lib/ ③.测试代码与效果图如下: 如图","categories":[{"name":"C++","slug":"C","permalink":"http://www.loop.wiki/categories/C/"}],"tags":[{"name":"FFMpeg","slug":"FFMpeg","permalink":"http://www.loop.wiki/tags/FFMpeg/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-24T10:44:41.460Z","updated":"2019-05-24T12:54:19.621Z","comments":true,"path":"2019/05/24/hello-world/","link":"","permalink":"http://www.loop.wiki/2019/05/24/hello-world/","excerpt":"","text":"欢迎访问鄙博客本博客用于个人文章记录,分类包括C++、易语言、APP逆向等欢迎加好友一起讨论技术！","categories":[{"name":"首页寄语","slug":"首页寄语","permalink":"http://www.loop.wiki/categories/首页寄语/"}],"tags":[]}]}